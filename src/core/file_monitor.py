
import os
import time
import logging
import threading
import shutil
from datetime import datetime
from pathlib import Path
from queue import Queue
from typing import Dict, List, Tuple, Optional, Callable, Any, Union

try:
    from watchdog.observers import Observer
    from watchdog.events import FileSystemEventHandler
    WATCHDOG_AVAILABLE = True
except ImportError:
    WATCHDOG_AVAILABLE = False

from src.core.database import DatabaseManager
from src.sync.utils import FileUtils, TimeUtils, CryptoUtils, NetworkUtils

logger = logging.getLogger(__name__)

class FileChangeHandler(FileSystemEventHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, callback: Callable[[str, str, Optional[str]], None]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        
        Args:
            callback (Callable[[str, str, Optional[str]], None]): –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
        """
        self.callback = callback
        super().__init__()
    
    def on_created(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏"""
        logger.debug(f"üÜï FileChangeHandler.on_created: {event.src_path} (is_dir={event.is_directory})")
        if not event.is_directory:
            self.callback('created', event.src_path)

    def on_modified(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏"""
        logger.debug(f"‚úèÔ∏è FileChangeHandler.on_modified: {event.src_path} (is_dir={event.is_directory})")
        if not event.is_directory:
            self.callback('modified', event.src_path)

    def on_deleted(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏"""
        logger.debug(f"üóëÔ∏è FileChangeHandler.on_deleted: {event.src_path} (is_dir={event.is_directory})")
        if not event.is_directory:
            self.callback('deleted', event.src_path)

    def on_moved(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞/–ø–∞–ø–∫–∏"""
        logger.debug(f"üì¶ FileChangeHandler.on_moved: {event.src_path} -> {event.dest_path} (is_dir={event.is_directory})")
        if not event.is_directory:
            self.callback('moved', event.src_path, event.dest_path)

class FileMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
    
    def __init__(self, db_manager: DatabaseManager, error_handler=None, sync_callback=None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã

        Args:
            db_manager (DatabaseManager): –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            error_handler: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            sync_callback: Callback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ (–ø—Ä–∏–Ω–∏–º–∞–µ—Ç config_id)
        """
        self.db_manager = db_manager
        self.error_handler = error_handler
        self.sync_callback = sync_callback
        self.observers = {}
        self.event_queue = Queue()
        self.running = False
        self.worker_thread = None
        self.lock = threading.Lock()
        self.debounce_time = 5.0  # –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –¥–ª—è –ø–æ–¥–∞–≤–ª–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è —Ä–∞—Å—Ç—É—â–∏—Ö —Ñ–∞–π–ª–æ–≤)
        self.last_events = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π
        self.file_sizes = {}  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        
    def start(self) -> bool:
        """
        –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∞
        
        Returns:
            bool: True, –µ—Å–ª–∏ –∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω
        """
        if not WATCHDOG_AVAILABLE:
            logger.error("–ú–æ–¥—É–ª—å watchdog –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ watchdog")
            return False
        
        with self.lock:
            if self.running:
                logger.warning("–ú–æ–Ω–∏—Ç–æ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
                return False
            
            self.running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π
            self.worker_thread = threading.Thread(target=self._process_events)
            self.worker_thread.daemon = True
            self.worker_thread.start()
            
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø—É—â–µ–Ω")
            return True
    
    def stop(self) -> bool:
        """
        –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∞
        
        Returns:
            bool: True, –µ—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–∞
        """
        with self.lock:
            if not self.running:
                logger.warning("–ú–æ–Ω–∏—Ç–æ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return False
            
            self.running = False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
            for path, observer in self.observers.items():
                observer.stop()
                observer.join()
            
            self.observers.clear()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞
            self.event_queue.put(None)
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—á–µ–≥–æ –ø–æ—Ç–æ–∫–∞
            if self.worker_thread:
                self.worker_thread.join(timeout=5)
            
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
    
    def add_watch(self, path: str, config_id: int) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        
        Args:
            path (str): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            config_id (int): ID –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            
        Returns:
            bool: True, –µ—Å–ª–∏ –ø—É—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        if not WATCHDOG_AVAILABLE:
            logger.error("–ú–æ–¥—É–ª—å watchdog –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ watchdog")
            return False
        
        with self.lock:
            if not self.running:
                logger.error("–ú–æ–Ω–∏—Ç–æ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø—É—Ç—å
            if path in self.observers:
                logger.warning(f"–ü—É—Ç—å {path} —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É—Ç–∏
            if not os.path.exists(path):
                logger.error(f"–ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {path}")
                return False
            
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
                observer = Observer()
                event_handler = FileChangeHandler(
                    lambda event_type, src_path, dest_path=None: self._on_file_event(
                        event_type, src_path, dest_path, config_id
                    )
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è
                observer.schedule(event_handler, path, recursive=True)
                observer.start()
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
                self.observers[path] = observer
                
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {path}")
                return True
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—É—Ç–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {path}: {e}")
                return False
    
    def remove_watch(self, path: str) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Ç–∏ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        
        Args:
            path (str): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            
        Returns:
            bool: True, –µ—Å–ª–∏ –ø—É—Ç—å —É–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ
        """
        with self.lock:
            if path not in self.observers:
                logger.warning(f"–ü—É—Ç—å {path} –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è")
                return False
            
            try:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è
                observer = self.observers[path]
                observer.stop()
                observer.join()
                
                # –£–¥–∞–ª—è–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                del self.observers[path]
                
                logger.info(f"–£–¥–∞–ª–µ–Ω –ø—É—Ç—å –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {path}")
                return True
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—É—Ç–∏ –∏–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {path}: {e}")
                return False
    
    def _on_file_event(self, event_type: str, src_path: str, dest_path: Optional[str], config_id: int):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã

        Args:
            event_type (str): –¢–∏–ø —Å–æ–±—ã—Ç–∏—è (created, modified, deleted, moved)
            src_path (str): –ò—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å
            dest_path (Optional[str]): –¶–µ–ª–µ–≤–æ–π –ø—É—Ç—å (–¥–ª—è —Å–æ–±—ã—Ç–∏—è moved)
            config_id (int): ID –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        """
        logger.info(f"üîî –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event_type} –¥–ª—è {src_path} (config={config_id})")

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–∞–ø–∫–∏
        if os.path.basename(src_path).startswith('.'):
            logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω —Å–∫—Ä—ã—Ç—ã–π —Ñ–∞–π–ª: {src_path}")
            return

        # –î–ª—è —Å–æ–±—ã—Ç–∏—è moved —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–µ–≤–æ–π –ø—É—Ç—å
        if event_type == 'moved' and dest_path and os.path.basename(dest_path).startswith('.'):
            logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω —Å–∫—Ä—ã—Ç—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏: {dest_path}")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        event = {
            'type': event_type,
            'src_path': src_path,
            'dest_path': dest_path,
            'config_id': config_id,
            'timestamp': datetime.now()
        }
        self.event_queue.put(event)
        logger.info(f"üì• –°–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {event_type} - {src_path}")
    
    def _process_events(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        from queue import Empty
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                event = self.event_queue.get(timeout=1)

                if event is None:
                    # –°–∏–≥–Ω–∞–ª –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
                    break

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Å –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º –¥—Ä–µ–±–µ–∑–≥–∞
                self._handle_event_with_debounce(event)

            except Empty:
                # –¢–∞–π–º–∞—É—Ç - –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                continue
            except Exception as e:
                logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    def _handle_event_with_debounce(self, event: Dict[str, Any]):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º –¥—Ä–µ–±–µ–∑–≥–∞

        Args:
            event (Dict[str, Any]): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏
        """
        try:
            event_type = event['type']
            src_path = event['src_path']
            config_id = event['config_id']
            timestamp = event['timestamp']

            # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è
            event_key = f"{event_type}:{src_path}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –ø–æ–¥–æ–±–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
            if event_key in self.last_events:
                last_time = self.last_events[event_key]
                time_diff = (timestamp - last_time).total_seconds()

                if time_diff < self.debounce_time:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ–µ
                    logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ {event_key} (debounce={time_diff:.2f}s)")
                    return

            logger.info(f"‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ {event_type} –¥–ª—è {src_path}")

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
            self.last_events[event_key] = timestamp

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            self._handle_event(event)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã —Å –ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º –¥—Ä–µ–±–µ–∑–≥–∞: {e}")
    
    def _handle_event(self, event: Dict[str, Any]):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
        
        Args:
            event (Dict[str, Any]): –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–±—ã—Ç–∏–∏
        """
        try:
            event_type = event['type']
            src_path = event['src_path']
            dest_path = event.get('dest_path')
            config_id = event['config_id']
            timestamp = event['timestamp']
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config = self.db_manager.get_sync_config(config_id)
            if not config:
                logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å ID: {config_id}")
                return
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å —Ñ–∞–π–ª–∞
            source_path = config['source_path']
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π –ø–∞–ø–∫–∏
            try:
                rel_path = os.path.relpath(src_path, source_path)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π –ø–∞–ø–∫–∏
                if rel_path.startswith('..'):
                    return
            except ValueError:
                # –ü—É—Ç–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –¥–∏—Å–∫–∞—Ö –≤ Windows
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if event_type == 'created':
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {src_path}")
                self._handle_file_created(config_id, rel_path, timestamp)
            
            elif event_type == 'modified':
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {src_path}")
                self._handle_file_modified(config_id, rel_path, timestamp)
            
            elif event_type == 'deleted':
                logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {src_path}")
                self._handle_file_deleted(config_id, rel_path, timestamp)
            
            elif event_type == 'moved':
                if dest_path:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª–µ–≤–æ–π –ø—É—Ç—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π –ø–∞–ø–∫–∏
                    try:
                        dest_rel_path = os.path.relpath(dest_path, source_path)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—É—Ç—å –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π –ø–∞–ø–∫–∏
                        if dest_rel_path.startswith('..'):
                            return
                    except ValueError:
                        # –ü—É—Ç–∏ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –¥–∏—Å–∫–∞—Ö –≤ Windows
                        return
                    
                    logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {src_path} -> {dest_path}")
                    self._handle_file_moved(config_id, rel_path, dest_rel_path, timestamp)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã: {e}")
    
    def _handle_file_created(self, config_id: int, rel_path: str, timestamp: datetime):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        
        Args:
            config_id (int): ID –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            rel_path (str): –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            timestamp (datetime): –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            config = self.db_manager.get_sync_config(config_id)
            source_path = config['source_path']
            file_path = os.path.join(source_path, rel_path)
            
            if not os.path.exists(file_path):
                message = f'–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}'
                logger.error(message)
                if self.error_handler:
                    self.error_handler.log_error(message)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            stat = os.stat(file_path)
            current_size = stat.st_size

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞–±–∏–ª–µ–Ω –ª–∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–¥–ª—è —Ä–∞—Å—Ç—É—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –±–µ–∫–∞–ø–æ–≤)
            file_key = f"{config_id}:{rel_path}"

            # –î–ª—è –ø—É—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤ (0 –±–∞–π—Ç) –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            if current_size == 0:
                logger.info(f"‚úÖ –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª {rel_path} (0 –±–∞–π—Ç), –≥–æ—Ç–æ–≤ –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –±—ã–ª —Ç–∞–º
                if file_key in self.file_sizes:
                    del self.file_sizes[file_key]
            elif file_key in self.file_sizes:
                last_size = self.file_sizes[file_key]
                if last_size != current_size:
                    logger.info(f"üìà –§–∞–π–ª {rel_path} –≤—Å—ë –µ—â—ë —Ä–∞—Å—Ç—ë—Ç ({last_size} -> {current_size} –±–∞–π—Ç), –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
                    self.file_sizes[file_key] = current_size
                    return
                else:
                    logger.info(f"‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ {rel_path} —Å—Ç–∞–±–∏–ª–µ–Ω ({current_size} –±–∞–π—Ç), –≥–æ—Ç–æ–≤ –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                    del self.file_sizes[file_key]
            else:
                # –ü–µ—Ä–≤–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ - –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏ –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
                logger.info(f"üÜï –ù–æ–≤—ã–π —Ñ–∞–π–ª {rel_path} ({current_size} –±–∞–π—Ç), –æ–∂–∏–¥–∞–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞")
                self.file_sizes[file_key] = current_size
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            self.db_manager.update_file_state(
                config_id=config_id,
                file_path=rel_path,
                file_hash=None,  # –•–µ—à –±—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                modified_time=stat.st_mtime,
                sync_status='pending'
            )

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.db_manager.add_sync_history(
                config_id=config_id,
                status='pending',
                message=f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª: {rel_path}",
                start_time=timestamp,
                end_time=timestamp
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            if self.sync_callback:
                logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_id} –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ {rel_path}")
                threading.Thread(target=self.sync_callback, args=(config_id,), daemon=True).start()

        except Exception as e:
            message = f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}'
            logger.exception(message)
            if self.error_handler:
                self.error_handler.log_error(message)
    
    def _handle_file_modified(self, config_id: int, rel_path: str, timestamp: datetime):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
        
        Args:
            config_id (int): ID –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            rel_path (str): –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            timestamp (datetime): –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            config = self.db_manager.get_sync_config(config_id)
            source_path = config['source_path']
            file_path = os.path.join(source_path, rel_path)
            
            if not os.path.exists(file_path):
                message = f'–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}'
                logger.error(message)
                if self.error_handler:
                    self.error_handler.log_error(message)
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            stat = os.stat(file_path)
            current_size = stat.st_size

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–∞–±–∏–ª–µ–Ω –ª–∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–¥–ª—è —Ä–∞—Å—Ç—É—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –±–µ–∫–∞–ø–æ–≤)
            file_key = f"{config_id}:{rel_path}"

            # –î–ª—è –ø—É—Å—Ç—ã—Ö —Ñ–∞–π–ª–æ–≤ (0 –±–∞–π—Ç) –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            if current_size == 0:
                logger.info(f"‚úÖ –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª {rel_path} (0 –±–∞–π—Ç), –≥–æ—Ç–æ–≤ –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –±—ã–ª —Ç–∞–º
                if file_key in self.file_sizes:
                    del self.file_sizes[file_key]
            elif file_key in self.file_sizes:
                last_size = self.file_sizes[file_key]
                if last_size != current_size:
                    logger.info(f"üìà –§–∞–π–ª {rel_path} –≤—Å—ë –µ—â—ë –∏–∑–º–µ–Ω—è–µ—Ç—Å—è ({last_size} -> {current_size} –±–∞–π—Ç), –æ—Ç–∫–ª–∞–¥—ã–≤–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
                    self.file_sizes[file_key] = current_size
                    return
                else:
                    logger.info(f"‚úÖ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ {rel_path} —Å—Ç–∞–±–∏–ª–µ–Ω ({current_size} –±–∞–π—Ç), –≥–æ—Ç–æ–≤ –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                    # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
                    del self.file_sizes[file_key]
            else:
                # –ü–µ—Ä–≤–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è - –∑–∞–ø–æ–º–∏–Ω–∞–µ–º —Ä–∞–∑–º–µ—Ä
                logger.info(f"‚úèÔ∏è –§–∞–π–ª {rel_path} –∏–∑–º–µ–Ω—ë–Ω ({current_size} –±–∞–π—Ç), –æ–∂–∏–¥–∞–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞")
                self.file_sizes[file_key] = current_size
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            self.db_manager.update_file_state(
                config_id=config_id,
                file_path=rel_path,
                file_hash=None,  # –•–µ—à –±—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                modified_time=stat.st_mtime,
                sync_status='pending'
            )

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.db_manager.add_sync_history(
                config_id=config_id,
                status='pending',
                message=f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {rel_path}",
                start_time=timestamp,
                end_time=timestamp
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            if self.sync_callback:
                logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_id} –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {rel_path}")
                threading.Thread(target=self.sync_callback, args=(config_id,), daemon=True).start()

        except Exception as e:
            message = f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}'
            logger.exception(message)
            if self.error_handler:
                self.error_handler.log_error(message)
    
    def _handle_file_deleted(self, config_id: int, rel_path: str, timestamp: datetime):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞

        Args:
            config_id (int): ID –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            rel_path (str): –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            timestamp (datetime): –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        """
        try:
            # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            self.db_manager.delete_file_state(config_id, rel_path)

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.db_manager.add_sync_history(
                config_id=config_id,
                status='pending',
                message=f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {rel_path}",
                start_time=timestamp,
                end_time=timestamp
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            if self.sync_callback:
                logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_id} –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {rel_path}")
                threading.Thread(target=self.sync_callback, args=(config_id,), daemon=True).start()

        except Exception as e:
            message = f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}'
            logger.exception(message)
            if self.error_handler:
                self.error_handler.log_error(message)
    
    def _handle_file_moved(self, config_id: int, src_rel_path: str, dest_rel_path: str, timestamp: datetime):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞

        Args:
            config_id (int): ID –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            src_rel_path (str): –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏—Å—Ö–æ–¥–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            dest_rel_path (str): –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π —Ü–µ–ª–µ–≤–æ–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            timestamp (datetime): –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            config = self.db_manager.get_sync_config(config_id)
            source_path = config['source_path']

            # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–∞–π–ª–∞
            self.db_manager.delete_file_state(config_id, src_rel_path)

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º —Ñ–∞–π–ª–µ
            dest_path = os.path.join(source_path, dest_rel_path)
            if os.path.exists(dest_path):
                stat = os.stat(dest_path)

                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
                self.db_manager.update_file_state(
                    config_id=config_id,
                    file_path=dest_rel_path,
                    file_hash=None,  # –•–µ—à –±—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
                    modified_time=stat.st_mtime,
                    sync_status='pending'
                )

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.db_manager.add_sync_history(
                config_id=config_id,
                status='pending',
                message=f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: {src_rel_path} -> {dest_rel_path}",
                start_time=timestamp,
                end_time=timestamp
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
            if self.sync_callback:
                logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_id} –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {src_rel_path} -> {dest_rel_path}")
                threading.Thread(target=self.sync_callback, args=(config_id,), daemon=True).start()

        except Exception as e:
            message = f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—ã—Ç–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}'
            logger.exception(message)
            if self.error_handler:
                self.error_handler.log_error(message)
    
    def get_pending_files(self, config_id: int) -> List[str]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        
        Args:
            config_id (int): ID –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            
        Returns:
            List[str]: –°–ø–∏—Å–æ–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
        """
        try:
            file_states = self.db_manager.get_file_states(config_id)
            pending_files = [
                state['file_path'] for state in file_states 
                if state['sync_status'] == 'pending'
            ]
            return pending_files
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return []
    
    def get_watched_paths(self) -> List[Tuple[str, int]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—É—Ç–µ–π
        
        Returns:
            List[Tuple[str, int]]: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–ø—É—Ç—å, ID –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        """
        try:
            watched_paths = []
            for path, observer in self.observers.items():
                # –ü–æ–ª—É—á–∞–µ–º ID –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π
                # –≠—Ç–æ –Ω–µ–º–Ω–æ–≥–æ —Å–ª–æ–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –º—ã –Ω–µ —Ö—Ä–∞–Ω–∏–º —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
                # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —É–ª—É—á—à–∏—Ç—å —ç—Ç—É —á–∞—Å—Ç—å
                for config_id in self.db_manager.get_all_config_ids():
                    config = self.db_manager.get_sync_config(config_id)
                    if config and config['source_path'] == path:
                        watched_paths.append((path, config_id))
                        break
            
            return watched_paths
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—É—Ç–µ–π: {e}")
            return []
    
    def clear_old_events(self, max_age_hours: int = 24):
        """
        –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ —Å–ª–æ–≤–∞—Ä—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏–π
        
        Args:
            max_age_hours (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–±—ã—Ç–∏–π –≤ —á–∞—Å–∞—Ö
        """
        try:
            current_time = datetime.now()
            max_age_seconds = max_age_hours * 3600
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–±—ã—Ç–∏—è
            events_to_remove = []
            for event_key, timestamp in self.last_events.items():
                age_seconds = (current_time - timestamp).total_seconds()
                if age_seconds > max_age_seconds:
                    events_to_remove.append(event_key)
            
            for event_key in events_to_remove:
                del self.last_events[event_key]
            
            logger.debug(f"–û—á–∏—â–µ–Ω–æ {len(events_to_remove)} —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π: {e}")